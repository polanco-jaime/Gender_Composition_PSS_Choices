CREATE OR REPLACE TABLE  `ph-jabri.SIMAT_SNIES.SIMAT_SNIES`
OPTIONS () AS
WITH
SIMAT AS (
        SELECT *
        ,
        ( genero||" "||(nombre1)||" "||(apellido1)||" "||RIGHT(CAST(FECHA_NACIMIENTO_SIMAT AS STRING),7) ) AS ID3_SIMAT,
        ROW_NUMBER() OVER () AS ID_ROW

         FROM   `ph-jabri.ICFES.SIMAT`  --WHERE YEAR_INFO = '2012'
),
SIMAT_SNIES_ID1 AS (
                SELECT *,  FROM SIMAT 
                INNER JOIN `ph-jabri.ICFES.SNIES_07_2O_IDS` 
                ON ID1 = nro_documento

),
SIMAT_SNIES_ID2 AS (
            SELECT * FROM SIMAT 
            INNER JOIN `ph-jabri.ICFES.SNIES_07_2O_IDS` 
            ON  ID2 = nro_documento
),
SIMAT_SNIES_ID3 AS (
            SELECT * FROM SIMAT 
            INNER JOIN `ph-jabri.ICFES.SNIES_07_2O_IDS` 
            ON  ID3 = ID3_SIMAT
),
SIMAT_SNIES AS (
SELECT 
codigo_dane, codigo_dane_sede, cons_sede, nro_documento, 
apellido1, apellido2, nombre1, nombre2, grupo, genero, anno_inf, YEAR_INFO,
FECHA_NACIMIENTO_SIMAT, EDAD,
'X' START_SNIES,
SUFIX, ANNIO, ID_IES, IES_NOMBRE, ID_MUNICIPIO_IES, MUNICIPIO_IES, ORIG_CODE, ORIGEN, IDS,
-- STRING_AGG( DISTINCT PRIMER_NOMBRE) 
PRIMER_NOMBRE, SEGUNDO_NOMBRE, PRIMER_APELLIDO, SEGUNDO_APELLIDO, SEXO_BIOLOGICO,
FECHA_NACIMIENTO,
NOMBRE_PROGRAMA,
ID_AREA_CONOCIMIENTO,
ID_NBC,
NBC,
ID_MUN_PROGRAMA,
MUN_PROGRAMA,
AREA_CONOCIMIENTO,
LEVEL,


-- RN,
 (   CASE WHEN LEFT(REPLACE(PRIMER_NOMBRE,' ', ''), 3) ||'-'|| LEFT(REPLACE(PRIMER_APELLIDO,' ', ''), 3)  IS NOT NULL 
        THEN LEFT(REPLACE(nombre1,' ', ''), 3)||'-'|| LEFT(REPLACE(apellido1,' ', ''), 3)  = 
                LEFT(REPLACE(PRIMER_NOMBRE,' ', ''), 3) ||'-'|| LEFT(REPLACE(PRIMER_APELLIDO,' ', ''), 3) 
        ELSE NULL END ) SAME_NAME,
-- ID3_SIMAT( DISTINCT IFNULL(ID1, ID2) ) ID_SNIES ,
IFNULL(ID1, ID2)  ID_SNIES, 
ID3_SIMAT
FROM
                (
                        SELECT * FROM  SIMAT_SNIES_ID1
                        UNION ALL 
                        SELECT * FROM  SIMAT_SNIES_ID2
                        UNION ALL 
                        SELECT * FROM  SIMAT_SNIES_ID3
                )
-- GROUP BY 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22 ,23,24, 30,31,32,33,34,35,36,37,38,39
),
UNION_ALL AS (
                        SELECT * FROM  SIMAT_SNIES_ID1
                        UNION ALL 
                        SELECT * FROM  SIMAT_SNIES_ID2
                        UNION ALL 
                        SELECT * FROM  SIMAT_SNIES_ID3
), 
STUDYING AS (
SELECT 
codigo_dane,
codigo_dane_sede,
cons_sede,
grupo,
genero,
anno_inf,
YEAR_INFO,
FECHA_NACIMIENTO_SIMAT,
EDAD,
ID_ROW,
'X' START_SNIES,
ID3_SIMAT,
SUFIX,
ANNIO,
FARM_FINGERPRINT(ID3_SIMAT||" | "||IDS) ID,
IES_NOMBRE,
ID_MUNICIPIO_IES,
MUNICIPIO_IES,
ORIG_CODE,
ORIGEN,
NOMBRE_PROGRAMA,
ID_AREA_CONOCIMIENTO,
ID_NBC,
NBC,
ID_MUN_PROGRAMA,
MUN_PROGRAMA,
AREA_CONOCIMIENTO,
LEVEL

 FROM (
SELECT DISTINCT *,
ROW_NUMBER() OVER (PARTITION BY genero, grupo, FECHA_NACIMIENTO_SIMAT, cons_sede, YEAR_INFO,ANNIO, LEFT(NOMBRE1,2) , LEFT(APELLIDO1, 2))  AS RN
 FROM
                        (
                        SELECT * FROM  SIMAT_SNIES_ID1
                        UNION ALL 
                        SELECT * FROM  SIMAT_SNIES_ID2
                        UNION ALL 
                        SELECT * FROM  SIMAT_SNIES_ID3
                        )
)
WHERE RN =1 
),
/*
Debo incluir los que no continuaron estudiando, aquellos que no se matricularon.
PARA ELLO DEBO TOMAR SIMAT, Y DEBO ENCONTRAR DE SIMAT QUIENES NO CRUZAN CON LA BASE DE STUDYING, COSA CURIOSA ES QUE SE SUPONE QUE DEBEN SER APROXIMADAMENTE 2MILLONES
AUN NO TENGO CLARO COMO HACERLO.
*/
CHOOSING_BEST AS (
SELECT * FROM STUDYING
UNION ALL 
SELECT * FROM (
        SELECT 
        codigo_dane,
codigo_dane_sede,
cons_sede,
grupo,
genero,
anno_inf,
YEAR_INFO,
FECHA_NACIMIENTO_SIMAT,
EDAD,
 ID_ROW,
'X'START_SNIES,
'9999999' ID3_SIMAT,
'9999999' SUFIX,
'9999999' ANNIO,
9999999 ID,
'9999999' IES_NOMBRE,
'9999999' ID_MUNICIPIO_IES,
'9999999' MUNICIPIO_IES,
9999999 ORIG_CODE,
'9999999' ORIGEN,
'9999999' NOMBRE_PROGRAMA,
'9999999' ID_AREA_CONOCIMIENTO,
9999999 ID_NBC,
'9999999' NBC,
'9999999' ID_MUN_PROGRAMA,
'9999999' MUN_PROGRAMA,
'9999999' AREA_CONOCIMIENTO,
'9999999' LEVEL,
 FROM SIMAT
)
)
SELECT 
codigo_dane,
codigo_dane_sede,
cons_sede,
grupo,
genero,
anno_inf,
YEAR_INFO,
FECHA_NACIMIENTO_SIMAT,
EDAD,
 ID_ROW,
START_SNIES,

CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE ID3_SIMAT END ID3_SIMAT,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE SUFIX END AS SUFIX,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE ANNIO END AS ANNIO,
CASE WHEN ID=9999999 THEN NULL ELSE ID END AS ID,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE IES_NOMBRE END AS IES_NOMBRE,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE ID_MUNICIPIO_IES END AS ID_MUNICIPIO_IES,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE MUNICIPIO_IES END AS MUNICIPIO_IES,
CASE WHEN ID=9999999 THEN NULL ELSE  ORIG_CODE END AS ORIG_CODE,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE ORIGEN END AS ORIGEN,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE NOMBRE_PROGRAMA END AS NOMBRE_PROGRAMA,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE ID_AREA_CONOCIMIENTO END AS ID_AREA_CONOCIMIENTO,
CASE WHEN ID=9999999 THEN NULL ELSE  ID_NBC END AS ID_NBC,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE NBC END AS NBC ,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE ID_MUN_PROGRAMA END AS ID_MUN_PROGRAMA,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE MUN_PROGRAMA END AS  MUN_PROGRAMA,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE AREA_CONOCIMIENTO END AS  AREA_CONOCIMIENTO,
CASE WHEN ID3_SIMAT='9999999' THEN NULL ELSE LEVEL END AS LEVEL ,
RN1



 FROM (
SELECT DISTINCT *,
ROW_NUMBER() OVER (PARTITION BY ID_ROW ORDER BY SUFIX NULLS LAST)  AS RN1 
FROM CHOOSING_BEST
)
WHERE RN1 =1
-- SELECT * FROM (
--   SELECT * ,
-- ROW_NUMBER() OVER (PARTITION BY ID3_SIMAT, YEAR_INFO ORDER BY ID_SNIES NULLS LAST, ID_NBC nulls last ) AS RN

-- FROM SIMAT_SNIES

-- )
--  WHERE RN=      1
-- where nro_documento = '1000018473'



